name: Coverage
on:
  - push
  - pull_request
jobs:
  coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9']
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_dev.txt

    - name: Generate a coverage value
      id: coverage
      run: |
        # Generates a GitHub Workflow output named `lines`
        echo "##[set-output name=lines;]${COVERAGE}"
        # Create the directory where badges will be saved, if needed
        mkdir -p "${BADGE_PATH%/*}"
        echo "##[set-output name=path;]${BADGE_PATH}"

        coverage=$(pytest --cov=src/ tests/ | grep TOTAL | tail -c 5 | grep -Eo '[0-9]{1,4}')
        echo "COVERAGE=${coverage}" >> $GITHUB_ENV
      env:
        BADGE_PATH: .github/badges/coverage-badge.svg

    - name: Badge Action
      uses: emibcn/badge-action@v1.2.4
      id: create_badge_coverage
      with:
        label: 'Test Coverage'
        status: ${{ env.COVERAGE }}%
        path: ${{ steps.coverage.outputs.path }}

    # Use the output from the `coverage` step
    - name: Generate the badge SVG image
      uses: emibcn/badge-action@v1
      id: badge
      with:
        label: 'Test coverage'
        status: ${{ env.COVERAGE }}%
        color: ${{
          env.COVERAGE > 90 && 'green'  ||
          env.COVERAGE > 80 && 'yellow' ||
          env.COVERAGE > 70 && 'yellow' ||
          env.COVERAGE > 60 && 'orange' ||
          env.COVERAGE > 50 && 'orange' ||
          env.COVERAGE > 40 && 'red'    ||
          env.COVERAGE > 30 && 'red'    ||
          env.COVERAGE > 20 && 'red'    ||
          'red' }}
        path: ${{ steps.coverage.outputs.path }}

    - name: Upload badge as artifact
      uses: actions/upload-artifact@v2
      with:
        name: badge
        path: ${{ steps.coverage.outputs.path }}
        if-no-files-found: error

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - name: Commit badge
      env:
        BADGE: ${{ steps.coverage.outputs.path }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${BADGE}"
        git commit -m "Add/Update badge"
    - name: Push badge commit
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.extract_branch.outputs.branch }}
